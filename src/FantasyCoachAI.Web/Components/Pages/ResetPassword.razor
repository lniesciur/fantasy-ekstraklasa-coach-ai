@page "/reset-password"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using FantasyCoachAI.Web.Components.Layout
@layout EmptyLayout

<PageTitle>Resetowanie Hasła - Fantasy Coach AI</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center login-container" Style="min-height: 100vh;">
    <MudPaper Class="pa-8 w-100" Elevation="2" Style="max-width: 400px;">
        <!-- Header -->
        <div class="text-center mb-8">
            <div class="text-center mb-4">
                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" Color="Color.Primary" Style="font-size: 2.5rem;"></MudIcon>
            </div>
            <MudText Typo="Typo.h6" Class="font-weight-bold mb-1" Style="font-size: 1.1rem;">Resetowanie Hasła</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Podaj swój email, aby zresetować hasło</MudText>
        </div>

        <!-- Alert Messages -->
        @if (hasError)
        {
            <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="ClearError">
                @errorMessage
            </MudAlert>
        }

        @if (hasSuccess)
        {
            <MudAlert Severity="Severity.Success" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="ClearSuccess">
                @successMessage
            </MudAlert>
        }

        @if (step == 1)
        {
            <!-- Step 1: Email Verification -->
            <EditForm Model="emailModel" OnSubmit="HandleEmailSubmitAsync">
                <MudTextField 
                    @bind-Value="emailModel.Email"
                    Label="Adres Email"
                    Placeholder="twoj@email.com"
                    Variant="Variant.Outlined"
                    Margin="Margin.Normal"
                    InputType="InputType.Email"
                    FullWidth="true"
                    Class="mb-4"
                    Disabled="isSubmitting">
                </MudTextField>

                <MudButton 
                    ButtonType="ButtonType.Submit"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Size="Size.Large"
                    FullWidth="true"
                    Disabled="isSubmitting">
                    @if (isSubmitting)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Wysyłanie...</MudText>
                    }
                    else
                    {
                        <MudText>Wyślij Link Resetowania</MudText>
                    }
                </MudButton>
            </EditForm>

            <MudDivider Class="my-6" />

            <div class="text-center">
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Pamiętasz hasło?
                    <MudLink Href="/login" Underline="Underline.None">
                        <strong>Zaloguj się</strong>
                    </MudLink>
                </MudText>
            </div>
        }
        else if (step == 2)
        {
            <!-- Step 2: Code Verification -->
            <EditForm Model="codeModel" OnSubmit="HandleCodeSubmitAsync">
                <MudText Typo="Typo.body2" Class="mb-4">
                    Wyślaliśmy link do resetowania na Twój email. Wpisz kod lub kliknij link w wiadomości.
                </MudText>

                <MudTextField 
                    @bind-Value="codeModel.Code"
                    Label="Kod Resetowania"
                    Placeholder="123456"
                    Variant="Variant.Outlined"
                    Margin="Margin.Normal"
                    FullWidth="true"
                    Class="mb-4"
                    Disabled="isSubmitting">
                </MudTextField>

                <MudButton 
                    ButtonType="ButtonType.Submit"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Size="Size.Large"
                    FullWidth="true"
                    Disabled="isSubmitting">
                    @if (isSubmitting)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Weryfikacja...</MudText>
                    }
                    else
                    {
                        <MudText>Potwierdź Kod</MudText>
                    }
                </MudButton>

                <MudButton 
                    Variant="Variant.Text"
                    Color="Color.Secondary"
                    Size="Size.Small"
                    FullWidth="true"
                    OnClick="GoBackToEmail"
                    Class="mt-2">
                    Wróć i podaj inny email
                </MudButton>
            </EditForm>
        }
        else if (step == 3)
        {
            <!-- Step 3: New Password -->
            <EditForm Model="passwordModel" OnSubmit="HandlePasswordSubmitAsync">
                <MudText Typo="Typo.body2" Class="mb-4">
                    Podaj nowe hasło dla swojego konta.
                </MudText>

                <MudTextField 
                    @bind-Value="passwordModel.NewPassword"
                    Label="Nowe Hasło"
                    Placeholder="••••••••"
                    Variant="Variant.Outlined"
                    Margin="Margin.Normal"
                    InputType="showPassword ? InputType.Text : InputType.Password"
                    FullWidth="true"
                    Class="mb-4"
                    Disabled="isSubmitting"
                    AdornmentIcon="showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff"
                    OnAdornmentClick="() => showPassword = !showPassword"
                    AdornmentClickAction="AdornmentAction.Clear">
                </MudTextField>

                <MudTextField 
                    @bind-Value="passwordModel.ConfirmPassword"
                    Label="Potwierdź Hasło"
                    Placeholder="••••••••"
                    Variant="Variant.Outlined"
                    Margin="Margin.Normal"
                    InputType="showPassword ? InputType.Text : InputType.Password"
                    FullWidth="true"
                    Class="mb-4"
                    Disabled="isSubmitting"
                    AdornmentIcon="showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff"
                    OnAdornmentClick="() => showPassword = !showPassword"
                    AdornmentClickAction="AdornmentAction.Clear">
                </MudTextField>

                <MudButton 
                    ButtonType="ButtonType.Submit"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Size="Size.Large"
                    FullWidth="true"
                    Disabled="isSubmitting">
                    @if (isSubmitting)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Resetowanie...</MudText>
                    }
                    else
                    {
                        <MudText>Zresetuj Hasło</MudText>
                    }
                </MudButton>
            </EditForm>
        }
    </MudPaper>
</MudContainer>

@code {
    private int step = 1; // 1: Email, 2: Code, 3: Password
    private bool isSubmitting = false;
    private bool hasError = false;
    private bool hasSuccess = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool showPassword = false;

    private EmailModel emailModel = new();
    private CodeModel codeModel = new();
    private PasswordModel passwordModel = new();

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private async Task HandleEmailSubmitAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(emailModel.Email))
            {
                hasError = true;
                errorMessage = "Email nie może być pusty";
                return;
            }

            isSubmitting = true;
            hasError = false;

            // Simulate email sending
            await Task.Delay(1500);

            step = 2;
            successMessage = $"Link resetowania wysłany na {emailModel.Email}";
            hasSuccess = true;

            // Clear success message after 3 seconds
            await Task.Delay(3000);
            hasSuccess = false;
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Błąd podczas wysyłania: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleCodeSubmitAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(codeModel.Code))
            {
                hasError = true;
                errorMessage = "Kod nie może być pusty";
                return;
            }

            isSubmitting = true;
            hasError = false;

            // Simulate code verification
            await Task.Delay(1500);

            step = 3;
            successMessage = "Kod potwierdzony! Teraz ustaw nowe hasło.";
            hasSuccess = true;

            // Clear success message after 3 seconds
            await Task.Delay(3000);
            hasSuccess = false;
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Błąd podczas weryfikacji: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandlePasswordSubmitAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(passwordModel.NewPassword) || string.IsNullOrWhiteSpace(passwordModel.ConfirmPassword))
            {
                hasError = true;
                errorMessage = "Oba hasła muszą być wypełnione";
                return;
            }

            if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
            {
                hasError = true;
                errorMessage = "Hasła nie pasują do siebie";
                return;
            }

            if (passwordModel.NewPassword.Length < 8)
            {
                hasError = true;
                errorMessage = "Hasło musi mieć przynajmniej 8 znaków";
                return;
            }

            isSubmitting = true;
            hasError = false;

            // Simulate password reset
            await Task.Delay(1500);

            successMessage = "Hasło zostało zresetowane pomyślnie! Redirekcja na logowanie...";
            hasSuccess = true;

            // Redirect after 2 seconds
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Błąd podczas resetowania: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBackToEmail()
    {
        step = 1;
        hasError = false;
        hasSuccess = false;
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private void ClearError()
    {
        hasError = false;
        errorMessage = string.Empty;
    }

    private void ClearSuccess()
    {
        hasSuccess = false;
        successMessage = string.Empty;
    }

    // Models
    public class EmailModel
    {
        public string Email { get; set; } = string.Empty;
    }

    public class CodeModel
    {
        public string Code { get; set; } = string.Empty;
    }

    public class PasswordModel
    {
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
