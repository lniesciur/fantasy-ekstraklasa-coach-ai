# Unit Testing Guidelines for Fantasy Coach AI

## 📋 Overview

This document outlines comprehensive unit testing strategies for the Fantasy Coach AI application, covering all layers of the Clean Architecture implementation.

## 🏗️ Testing Architecture

### Test Structure by Layer

```
src/
├── FantasyCoachAI.Domain.Tests/           # Domain layer tests
│   ├── Entities/                          # Entity business logic tests
│   ├── Enums/                            # Enum validation tests
│   └── Exceptions/                        # Custom exception tests
├── FantasyCoachAI.Application.Tests/     # Application layer tests
│   ├── Services/                         # Service business logic tests
│   ├── Validators/                       # FluentValidation tests
│   ├── DTOs/                            # Data transfer object tests
│   ├── Performance/                     # Performance tests
│   ├── Async/                           # Asynchronous operation tests
│   └── Mocking/                         # Mock testing patterns
├── FantasyCoachAI.Infrastructure.Tests/ # Infrastructure layer tests
│   ├── Repositories/                     # Data access tests
│   ├── Mappers/                         # Object mapping tests
│   ├── Configuration/                   # Configuration tests
│   └── Integration/                     # Database integration tests
└── FantasyCoachAI.Web.Tests/            # Presentation layer tests
    ├── Controllers/                      # API controller tests
    ├── Middleware/                      # Middleware tests
    ├── Filters/                         # Action filter tests
    ├── Security/                        # Security tests
    ├── Integration/                     # End-to-end tests
    └── EndToEnd/                        # Full system tests
```

## 🎯 Testing Principles

### 1. **Test Categories**

#### **Unit Tests**
- Test individual components in isolation
- Use mocks for dependencies
- Fast execution (< 100ms per test)
- High code coverage (> 90%)

#### **Integration Tests**
- Test component interactions
- Use real dependencies where possible
- Test data flow between layers
- Moderate execution time (< 1s per test)

#### **Performance Tests**
- Test with large datasets (10,000+ records)
- Measure execution time and memory usage
- Test concurrent operations
- Stress testing scenarios

#### **Security Tests**
- SQL injection protection
- XSS attack prevention
- Input validation
- Authorization checks

### 2. **Test Naming Convention**

```csharp
// Pattern: MethodName_Scenario_ExpectedResult
[Fact]
public void GetByIdAsync_WhenValidId_ShouldReturnTeam()
{
    // Arrange, Act, Assert
}

[Theory]
[InlineData(1, true)]
[InlineData(0, false)]
public void IsValidId_WhenCalled_ShouldReturnCorrectValue(int id, bool expected)
{
    // Test implementation
}
```

### 3. **Test Structure (AAA Pattern)**

```csharp
[Fact]
public void ExampleTest_WhenCondition_ShouldReturnExpectedResult()
{
    // Arrange - Setup test data and mocks
    var mockRepository = new Mock<ITeamRepository>();
    var expectedTeam = new Team { Id = 1, Name = "Test Team" };
    mockRepository.Setup(x => x.GetByIdAsync(1)).ReturnsAsync(expectedTeam);
    
    // Act - Execute the method under test
    var result = await service.GetByIdAsync(1);
    
    // Assert - Verify the results
    result.Should().NotBeNull();
    result.Id.Should().Be(1);
    result.Name.Should().Be("Test Team");
}
```

## 🔧 Domain Layer Testing

### **Entity Tests**

#### **Gameweek Entity**
```csharp
public class GameweekTests
{
    [Theory]
    [InlineData("2025-01-01", "2025-01-10", "2024-12-31", GameweekStatus.Upcoming)]
    [InlineData("2025-01-01", "2025-01-10", "2025-01-01", GameweekStatus.Current)]
    [InlineData("2025-01-01", "2025-01-10", "2025-01-11", GameweekStatus.Completed)]
    public void GetStatus_WhenCalled_ShouldReturnCorrectStatus(
        string startDateStr, string endDateStr, string currentDateStr, GameweekStatus expectedStatus)
    {
        // Test gameweek status logic
    }
    
    [Fact]
    public void IsValidDateRange_WhenStartDateBeforeEndDate_ShouldReturnTrue()
    {
        // Test date range validation
    }
}
```

#### **Match Entity**
```csharp
public class MatchTests
{
    [Theory]
    [InlineData(MatchStatus.Scheduled, false)]
    [InlineData(MatchStatus.Live, false)]
    [InlineData(MatchStatus.Finished, true)]
    public void IsFinished_WhenCalled_ShouldReturnCorrectValue(MatchStatus status, bool expected)
    {
        // Test match status logic
    }
    
    [Fact]
    public void IsValidTeams_WhenDifferentTeams_ShouldReturnTrue()
    {
        // Test team validation
    }
}
```

#### **Team Entity**
```csharp
public class TeamTests
{
    [Theory]
    [InlineData("https://example.com/crest.png", true)]
    [InlineData(null, false)]
    [InlineData("", false)]
    public void HasCrest_WhenCalled_ShouldReturnCorrectValue(string crestUrl, bool expected)
    {
        // Test crest URL validation
    }
}
```

## 🏢 Application Layer Testing

### **Service Tests**

#### **TeamService Tests**
```csharp
public class TeamServiceTests
{
    [Fact]
    public async Task GetTeamsAsync_WhenValidFilter_ShouldReturnTeams()
    {
        // Test service method with valid input
    }
    
    [Fact]
    public async Task CreateAsync_WhenValidCommand_ShouldCreateTeam()
    {
        // Test team creation with business rules
    }
    
    [Fact]
    public async Task CreateAsync_WhenTeamAlreadyExists_ShouldThrowInvalidOperationException()
    {
        // Test business rule: unique team names
    }
}
```

#### **MatchService Tests**
```csharp
public class MatchServiceTests
{
    [Fact]
    public async Task CreateAsync_WhenSameTeam_ShouldThrowInvalidOperationException()
    {
        // Test business rule: teams cannot play against themselves
    }
    
    [Fact]
    public async Task CreateAsync_WhenMatchDateInPast_ShouldThrowArgumentException()
    {
        // Test business rule: matches cannot be in the past
    }
}
```

### **Validator Tests**

#### **CreateTeamCommandValidator Tests**
```csharp
public class CreateTeamCommandValidatorTests
{
    [Theory]
    [InlineData(null)]
    [InlineData("")]
    [InlineData("   ")]
    public void Validate_WhenNameIsNullOrWhitespace_ShouldHaveValidationError(string name)
    {
        // Test validation rules
    }
    
    [Theory]
    [InlineData("A")]      // Too short
    [InlineData("ABCD")]   // Too long
    [InlineData("a1")]     // Contains number
    public void Validate_WhenShortCodeIsInvalid_ShouldHaveValidationError(string shortCode)
    {
        // Test short code validation
    }
}
```

## 🗄️ Infrastructure Layer Testing

### **Repository Tests**

#### **TeamRepository Tests**
```csharp
public class TeamRepositoryTests
{
    [Fact]
    public async Task GetAllAsync_WhenCalled_ShouldReturnAllTeams()
    {
        // Test repository method
    }
    
    [Fact]
    public async Task CreateAsync_WhenValidTeam_ShouldCreateTeam()
    {
        // Test team creation in database
    }
    
    [Fact]
    public async Task GetAllAsync_WhenSupabaseThrowsException_ShouldPropagateException()
    {
        // Test error handling
    }
}
```

### **Mapper Tests**

#### **TeamMapper Tests**
```csharp
public class TeamMapperTests
{
    [Fact]
    public void ToDto_WhenValidTeam_ShouldMapCorrectly()
    {
        // Test entity to DTO mapping
    }
    
    [Fact]
    public void ToEntity_WhenValidCreateTeamCommand_ShouldMapCorrectly()
    {
        // Test command to entity mapping
    }
    
    [Fact]
    public void RoundTrip_WhenMappingTeamToDtoAndBack_ShouldPreserveData()
    {
        // Test round-trip mapping
    }
}
```

## 🌐 Web Layer Testing

### **Controller Tests**

#### **TeamsController Tests**
```csharp
public class TeamsControllerTests
{
    [Fact]
    public async Task GetTeams_WhenCalled_ShouldReturnOkResultWithTeams()
    {
        // Test API endpoint
    }
    
    [Fact]
    public async Task GetTeam_WhenTeamNotFound_ShouldThrowNotFoundException()
    {
        // Test error handling
    }
    
    [Fact]
    public async Task CreateTeam_WhenValidCommand_ShouldReturnCreatedResult()
    {
        // Test team creation endpoint
    }
}
```

### **Middleware Tests**

#### **ApiExceptionMiddleware Tests**
```csharp
public class ApiExceptionMiddlewareTests
{
    [Fact]
    public async Task InvokeAsync_WhenNotFoundException_ShouldReturn404WithMessage()
    {
        // Test exception handling
    }
    
    [Fact]
    public async Task InvokeAsync_WhenArgumentException_ShouldReturn400WithMessage()
    {
        // Test validation error handling
    }
}
```

## 🔒 Security Testing

### **Security Tests**
```csharp
public class SecurityTests
{
    [Theory]
    [InlineData("'; DROP TABLE teams; --")]
    [InlineData("' OR '1'='1")]
    public async Task GetTeams_WhenShortCodeContainsSqlInjection_ShouldNotExecuteSql(string maliciousInput)
    {
        // Test SQL injection protection
    }
    
    [Theory]
    [InlineData("<script>alert('xss')</script>")]
    [InlineData("javascript:alert('xss')")]
    public async Task GetTeams_WhenShortCodeContainsXss_ShouldNotExecuteScript(string maliciousInput)
    {
        // Test XSS protection
    }
}
```

## ⚡ Performance Testing

### **Performance Tests**
```csharp
public class PerformanceTests
{
    [Fact]
    public async Task GetTeamsAsync_WithLargeDataset_ShouldNotExceedMemoryLimit()
    {
        // Test memory usage with large datasets
    }
    
    [Fact]
    public async Task MultipleConcurrentOperations_ShouldCompleteWithinTimeLimit()
    {
        // Test concurrent operations performance
    }
}
```

## 🧪 Testing Utilities

### **Test Data Builders**
```csharp
public static class TestDataBuilder
{
    public static Team CreateValidTeam(int id = 1) => new Team
    {
        Id = id,
        Name = "Test Team",
        ShortCode = "TST",
        IsActive = true
    };
    
    public static List<Team> CreateLargeTeamList(int count)
    {
        return Enumerable.Range(1, count)
            .Select(i => new Team
            {
                Id = i,
                Name = $"Team {i}",
                ShortCode = $"T{i:D3}",
                IsActive = i % 2 == 0
            })
            .ToList();
    }
}
```

### **Mock Setup Helpers**
```csharp
public static class MockSetupHelper
{
    public static void SetupTeamRepository(Mock<ITeamRepository> mock, List<Team> teams)
    {
        mock.Setup(x => x.GetAllAsync()).ReturnsAsync(teams);
        mock.Setup(x => x.GetByIdAsync(It.IsAny<int>()))
            .ReturnsAsync((int id) => teams.FirstOrDefault(t => t.Id == id));
    }
}
```

## 📊 Test Coverage Requirements

### **Minimum Coverage Targets**
- **Domain Layer**: 95%+ coverage
- **Application Layer**: 90%+ coverage
- **Infrastructure Layer**: 85%+ coverage
- **Web Layer**: 80%+ coverage

### **Critical Path Coverage**
- All business rules must be tested
- All error scenarios must be covered
- All edge cases must be tested
- All security vulnerabilities must be tested

## 🚀 Running Tests

### **Command Line**
```bash
# Run all tests
dotnet test

# Run specific test category
dotnet test --filter Category=Unit
dotnet test --filter Category=Integration
dotnet test --filter Category=Performance
dotnet test --filter Category=Security

# Run with coverage
dotnet test --collect:"XPlat Code Coverage"

# Run specific test class
dotnet test --filter ClassName=TeamServiceTests
```

### **Test Categories**
```csharp
[Trait("Category", "Unit")]
[Trait("Category", "Integration")]
[Trait("Category", "Performance")]
[Trait("Category", "Security")]
```

## 📈 Continuous Integration

### **CI Pipeline Tests**
1. **Unit Tests** - Run on every commit
2. **Integration Tests** - Run on pull requests
3. **Performance Tests** - Run nightly
4. **Security Tests** - Run on deployment

### **Test Reports**
- Code coverage reports
- Performance benchmarks
- Security scan results
- Test execution reports

## 🔍 Debugging Tests

### **Common Issues**
1. **Async/Await** - Always use `await` in async tests
2. **Mock Setup** - Verify mock configurations
3. **Test Data** - Use consistent test data
4. **Assertions** - Use descriptive assertion messages

### **Best Practices**
1. **One Assert Per Test** - Keep tests focused
2. **Descriptive Names** - Use clear test names
3. **Independent Tests** - Tests should not depend on each other
4. **Fast Tests** - Keep unit tests fast
5. **Reliable Tests** - Tests should be deterministic

## 📚 Additional Resources

- [xUnit Documentation](https://xunit.net/)
- [FluentAssertions Documentation](https://fluentassertions.com/)
- [Moq Documentation](https://github.com/moq/moq4)
- [Clean Architecture Testing](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)

---

*This document serves as a comprehensive guide for unit testing the Fantasy Coach AI application, ensuring high quality, maintainability, and reliability of the codebase.*